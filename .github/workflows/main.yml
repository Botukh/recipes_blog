name: Foodgram

on:
  push:
    branches:
      - main

jobs:
  build_backend_and_push_to_docker_hub:
    if: github.ref == 'refs/heads/main'
    name: Build & Push Backend Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            julia949/foodgram-backend:latest

  build_frontend_and_push_to_docker_hub:
    if: github.ref == 'refs/heads/main'
    name: Build & Push Frontend Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            julia949/foodgram-frontend:latest

  build_nginx_and_push_to_docker_hub:
    if: github.ref == 'refs/heads/main'
    name: Build & Push Nginx Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push nginx image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: |
            julia949/foodgram-nginx:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_nginx_and_push_to_docker_hub
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"

      - name: Execute remote SSH commands for deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            sudo mkdir -p media
            cat > .env << EOF
            DJANGO_SECRET_KEY=_w&t3ceb_8jz28vdqrrd^-j@&))^8qhzzi*)g(f#nnd0x)lshh
            ALLOWED_HOSTS=localhost,foodgamm.zapto.org,130.193.42.80
            CSRF_TRUSTED_ORIGINS=https://foodgamm.zapto.org
            DEBUG=False
            POSTGRES_USER=foodgram_user
            POSTGRES_PASSWORD=mysecretpassword
            POSTGRES_DB=foodgram
            DB_HOST=db
            DB_PORT=5432
            EOF
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/static/. /backend_static/static/
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py import_ingredients --format csv --path data/ingredients.csv

  send_telegram_notification:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            *Foodgram*: деплой завершён успешно!
            • Пользователь: `${{ github.actor }}`
            • Коммит: `${{ github.event.head_commit.message }}`
            • Ссылка: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
